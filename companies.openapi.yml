openapi: 3.0.3
info:
  title: Test API
  description: Test API
  version: 0.0.1
servers:
- url: http://localhost:8080
paths:
  /users:
    get:
      operationId: listUsers
      parameters:
      - name: id
        in: query
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: filter
        in: query
        style: form
        schema:
          $ref: '#/components/schemas/UserFilter'
      - name: q
        in: query
        schema:
          type: string
      - name: _sort
        in: query
        schema:
          $ref: '#/components/schemas/UserSort'
      - name: _order
        in: query
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: _start
        in: query
        schema:
          minimum: 0
          type: integer
          format: int64
      - name: _end
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: string
              example: "X-Total-Count: 319"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      operationId: readUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /companies:
    get:
      operationId: listCompanies
      parameters:
      - name: id
        in: query
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: filter
        in: query
        style: form
        schema:
          $ref: '#/components/schemas/CompanyFilter'
      - name: q
        in: query
        schema:
          type: string
      - name: _sort
        in: query
        schema:
          $ref: '#/components/schemas/CompanySort'
      - name: _order
        in: query
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: _start
        in: query
        schema:
          minimum: 0
          type: integer
          format: int64
      - name: _end
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: string
              example: "X-Total-Count: 319"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
    post:
      operationId: createCompany
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCreate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
  /companies/{id}:
    get:
      operationId: readCompany
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
    put:
      operationId: updateCompany
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
    delete:
      operationId: deleteCompany
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /employees:
    get:
      operationId: listEmployees
      parameters:
      - name: id
        in: query
        schema:
          type: array
          items:
            type: integer
            format: int64
      - name: filter
        in: query
        style: form
        schema:
          $ref: '#/components/schemas/EmployeeFilter'
      - name: q
        in: query
        schema:
          type: string
      - name: _sort
        in: query
        schema:
          $ref: '#/components/schemas/EmployeeSort'
      - name: _order
        in: query
        schema:
          $ref: '#/components/schemas/SortOrder'
      - name: _start
        in: query
        schema:
          minimum: 0
          type: integer
          format: int64
      - name: _end
        in: query
        schema:
          maximum: 1000
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          headers:
            X-Total-Count:
              schema:
                type: string
              example: "X-Total-Count: 319"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeCreate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
  /employees/{id}:
    get:
      operationId: readEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
    put:
      operationId: updateEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeUpdate'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
    delete:
      operationId: deleteEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
components:
  schemas:
    UserFilter:
      title: UserFilter
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
    User:
      title: User
      required:
      - id
      - email
      - displayName
      - currentEmployeeId
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
        currentEmployeeId:
          type: integer
          format: int64
    UserSort:
      title: UserSort
      enum:
      - id
      - email
      - firstName
      - lastName
      - displayName
    UserCreate:
      title: UserCreate
      required:
      - email
      - displayName
      properties:
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
    UserUpdate:
      title: UserUpdate
      required:
      - displayName
      properties:
        firstName:
          type: string
        lastName:
          type: string
        displayName:
          type: string
    CompanyFilter:
      title: CompanyFilter
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        vatNumber:
          type: string
          format: vat
        externalId:
          type: string
        verified:
          type: boolean
        lastVerifiedAt:
          type: string
          format: date-time
        lastUnverifiedAt:
          type: string
          format: date-time
    Company:
      title: Company
      required:
      - id
      - name
      - vatNumber
      - verified
      - lastVerifiedAt
      - lastUnverifiedAt
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        vatNumber:
          type: string
          format: vat
        externalId:
          type: string
        url:
          type: string
          format: url
        verified:
          type: boolean
        lastVerifiedAt:
          type: string
          format: date-time
        lastUnverifiedAt:
          type: string
          format: date-time
    CompanySort:
      title: CompanySort
      enum:
      - id
      - name
      - vatNumber
      - externalId
      - verified
      - lastVerifiedAt
      - lastUnverifiedAt
    CompanyCreate:
      title: CompanyCreate
      required:
      - name
      - vatNumber
      - verified
      properties:
        name:
          type: string
        vatNumber:
          type: string
          format: vat
        externalId:
          type: string
        url:
          type: string
          format: url
        verified:
          type: boolean
    CompanyUpdate:
      title: CompanyUpdate
      required:
      - name
      - verified
      properties:
        name:
          type: string
        url:
          type: string
          format: url
        verified:
          type: boolean
    EmployeeFilter:
      title: EmployeeFilter
      properties:
        id:
          type: integer
          format: int64
        active:
          type: boolean
        lastActivatedAt:
          type: string
          format: date-time
        lastDeActivatedAt:
          type: string
          format: date-time
        userId:
          type: integer
          format: int64
        companyId:
          type: integer
          format: int64
    Employee:
      title: Employee
      required:
      - id
      - active
      - lastActivatedAt
      - lastDeActivatedAt
      - userId
      - companyId
      properties:
        id:
          type: integer
          format: int64
        active:
          type: boolean
        lastActivatedAt:
          type: string
          format: date-time
        lastDeActivatedAt:
          type: string
          format: date-time
        userId:
          type: integer
          format: int64
        companyId:
          type: integer
          format: int64
    EmployeeSort:
      title: EmployeeSort
      enum:
      - id
      - active
      - lastActivatedAt
      - lastDeActivatedAt
      - userId
      - companyId
    EmployeeCreate:
      title: EmployeeCreate
      required:
      - active
      - userId
      - companyId
      properties:
        active:
          type: boolean
        userId:
          type: integer
          format: int64
        companyId:
          type: integer
          format: int64
    EmployeeUpdate:
      title: EmployeeUpdate
      required:
      - active
      properties:
        active:
          type: boolean
    SortOrder:
      type: string
      enum:
      - ASC
      - DESC
